# lets' other classes import only 'ImageEval'
__all__ = ["ImageEval"]


from .sgd import *
from .accel import *
from .resnet import *
from .dtaset import *
from .augment import *
from .learner import *
from .convolution import *
from .activations import *
from .initialization import *
from scipy import linalg  # pip install scipy

import math, torch
import fastcore.all as fc


def _sqrtm_newton_schulz(mat, num_iters=100):
    """
    Compute the square root of a matrix using the Newton-Schulz method.

    Parameters:
    mat (torch.Tensor): The input matrix.
    num_iters (int): The number of iterations for the Newton-Schulz method.

    Returns:
    torch.Tensor: The square root of the input matrix.
    """
    mat_nrm = mat.norm()
    mat = mat.double()
    Y = mat / mat_nrm
    n = len(mat)
    I = torch.eye(n, n).to(mat)
    Z = torch.eye(n, n).to(mat)

    for i in range(num_iters):
        T = (3 * I - Z @ Y) / 2
        Y, Z = Y @ T, T @ Z
        res = Y * mat_nrm.sqrt()
        if ((mat - (res @ res)).norm() / mat_nrm).abs() <= 1e-6:
            break
    return res


def _calc_stats(feats):
    """
    Calculate the mean and covariance of a set of features.

    Parameters:
    feats (torch.Tensor): The input features.

    Returns:
    tuple: The mean and covariance of the input features.
    """
    feats = feats.squeeze()
    return feats.mean(0), feats.T.cov()


def _calc_fid(m1, c1, m2, c2):
    """
    Calculate the Frechet Inception Distance (FID) between two sets of features.

    Parameters:
    m1 (torch.Tensor): The mean of the first set of features.
    c1 (torch.Tensor): The covariance of the first set of features.
    m2 (torch.Tensor): The mean of the second set of features.
    c2 (torch.Tensor): The covariance of the second set of features.

    Returns:
    float: The FID between the two sets of features.
    """
    # csr = _sqrtm_newton_schulz(c1@c2)
    csr = tensor(linalg.sqrtm(c1 @ c2, 256).real)
    # c1.trace(), c2.trace() returns the sum of elements of the diagonal 
    # of the i/p 2D matrix.
    return (((m1 - m2) ** 2).sum() + c1.trace() + c2.trace() - 2 * csr.trace()).item()
    # we return a standard python number as o/p.


def _squared_mmd(x, y):
    """
    Calculate the squared Maximum Mean Discrepancy (MMD) between two sets of features.
    
    MMD is a measure of the distance between two probability distributions. 
    Used in ML to compare the distribution of data 
    generated by a model to the distribution of real data.

    Parameters:
    x (torch.Tensor): The first set of features.
    y (torch.Tensor): The second set of features.

    Returns:
    torch.Tensor: The squared MMD between the two sets of features. If the value is smaller 
    then x, y distributions are similar, otherwise they are different.
    """

    def k(a, b):
        # A kernel function
        return (a @ b.transpose(-2, -1) / a.shape[-1] + 1) ** 3

    m, n = x.shape[-2], y.shape[-2]
    # kernal matrices
    kxx, kyy, kxy = k(x, x), k(y, y), k(x, y)
    # kernel matrix summation excluding the diagonals
    kxx_sum = kxx.sum([-1, -2]) - kxx.diagonal(0, -1, -2).sum(-1)
    kyy_sum = kyy.sum([-1, -2]) - kyy.diagonal(0, -1, -2).sum(-1)
    # kernel matrix summation
    kxy_sum = kxy.sum([-1, -2])
    return kxx_sum / m / (m - 1) + kyy_sum / n / (n - 1) - kxy_sum * 2 / m / n


def _calc_kid(x, y, maxs=50):
    """
    Calculate the Kernel Inception Distance (KID) between two sets of features.

    Parameters:
    x (torch.Tensor): The first set of features.
    y (torch.Tensor): The second set of features.
    maxs (int): The maximum number of samples to use for the calculation.

    Returns:
    float: The KID between the two sets of features.
    """
    xs, ys = x.shape[0], y.shape[0]
    n = max(math.ceil(min(xs / maxs, ys / maxs)), 4)
    mmd = 0.0
    for i in range(n):
        cur_x = x[round(i * xs / n) : round((i + 1) * xs / n)]
        cur_y = y[round(i * ys / n) : round((i + 1) * ys / n)]
        mmd += _squared_mmd(cur_x, cur_y)
    return (mmd / n).item()


class ImageEval:
    """
    A class for evaluating images using the Frechet Inception Distance (FID) and Kernel Inception Distance (KID).
    """

    def __init__(self, model, dls, cbs=None):
        """
        Initialize the ImageEval class.

        Parameters:
        model (nn.Module): The model to use for feature extraction.
        dls (DataLoaders): The data loaders for the images to evaluate.
        cbs (list): A list of callbacks to use during training.
        """
        self.learn = TrainLearner(model, dls, loss_func=fc.noop, cbs=cbs, opt_func=None)
        self.feats = self.learn.capture_preds()[0].float().cpu().squeeze()
        self.stats = _calc_stats(self.feats)

    def get_feats(self, samp):
        """
        Get the features for a sample of images.

        Parameters:
        samp (torch.Tensor): The sample of images.

        Returns:
        torch.Tensor: The features for the sample of images.
        """
        self.learn.dls = DataLoaders([], [(samp, tensor([0]))])
        return self.learn.capture_preds()[0].float().cpu().squeeze()

    def fid(self, samp):
        """
        Calculate the FID for a sample of images.

        Parameters:
        samp (torch.Tensor): The sample of images.

        Returns:
        float: The FID for the sample of images.
        """
        return _calc_fid(*self.stats, *_calc_stats(self.get_feats(samp)))

    def kid(self, samp):
        """
        Calculate the KID for a sample of images.

        Parameters:
        samp (torch.Tensor): The sample of images.

        Returns:
        float: The KID for the sample of images.
        """
        return _calc_kid(self.feats, self.get_feats(samp))
